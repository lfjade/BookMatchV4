import {Livro} from "../src/Models/Livro"
import {Usuario} from "../src/Models/Usuario"
import {Locacao} from "../src/Models/Locacao"

// Mensagens de status do teste
function testar(condicao: boolean, mensagem: string) {
    if (condicao) {
        console.log(`‚úÖ ${mensagem} passou.`);
    } else {
        console.log(`‚ùå ${mensagem} falhou.`);
    }
}

// Simula cria√ß√£o de usu√°rios e livros
const usuario1 = new Usuario("Jo√£o Silva", "joaosilva", "123.456.789-00", "senha123", false);
const usuario2 = new Usuario("Maria Oliveira", "mariaoliveira", "987.654.321-00", "senha456", false);
const livro1 = new Livro("Livro A", "Autor X", [], "Editora Y", "1¬™", new Date(2022, 5, 10));
const livro2 = new Livro("Livro B", "Autor Z", [], "Editora W", "2¬™", new Date(2023, 3, 15));

// Exibe in√≠cio dos testes
console.log("Iniciando testes da classe Locacao...");

// üîπ Teste: Criar uma loca√ß√£o v√°lida
const locacao1 = new Locacao(livro1, usuario1);
testar(Locacao.listaLocacoes.includes(locacao1), "Criar loca√ß√£o v√°lida");

// üîπ Teste: N√£o permitir loca√ß√£o de livro j√° alugado
const locacao2 = new Locacao(livro1, usuario2);
testar(!Locacao.listaLocacoes.includes(locacao2), "Bloquear loca√ß√£o de livro indispon√≠vel");

// üîπ Teste: Buscar loca√ß√£o por ID
const locacaoEncontrada = locacao1.buscaLocacaoPorID(locacao1["_id"]);
testar(locacaoEncontrada === locacao1, "Buscar loca√ß√£o por ID");

// üîπ Teste: Buscar loca√ß√µes por usu√°rio
const locacoesUsuario = locacao1.buscaLocacaoPorUsuario(usuario1);
testar(locacoesUsuario !== null && locacoesUsuario.length === 1, "Buscar loca√ß√£o por usu√°rio");

// üîπ Teste: Buscar loca√ß√µes por livro
const locacoesLivro = locacao1.buscaLocacaoPorLivro(livro1);
testar(locacoesLivro !== null && locacoesLivro.length === 1, "Buscar loca√ß√£o por livro");

// üîπ Teste: Buscar loca√ß√µes ativas
const locacoesAtivas = locacao1.buscaLocacaoAtiva();
testar(locacoesAtivas.length === 1, "Buscar loca√ß√µes ativas");

// üîπ Teste: Buscar loca√ß√µes conclu√≠das
const locacoesConcluidas = locacao1.buscaLocacoesConcluidas();
testar(locacoesConcluidas.length === 0, "Buscar loca√ß√µes conclu√≠das");

// üîπ Teste: Buscar loca√ß√µes atrasadas (simula atraso)
locacao1["_previsaoDevolucao"] = new Date(2024, 0, 1); // Data antiga para testar atraso
const locacoesAtrasadas = locacao1.buscaLocacoesAtrasadas();
testar(locacoesAtrasadas.length === 1, "Buscar loca√ß√µes atrasadas");

// Exibe conclus√£o dos testes
console.log("Todos os testes foram conclu√≠dos.");
